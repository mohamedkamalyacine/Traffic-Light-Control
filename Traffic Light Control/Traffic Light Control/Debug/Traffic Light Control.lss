
Traffic Light Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000858  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000858  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000888  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015df  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099d  00000000  00000000  0000200b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae9  00000000  00000000  000029a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  00003494  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067b  00000000  00000000  000036ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bdb  00000000  00000000  00003d67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004942  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <main>
  74:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_setPin>:
#include "../../00- Common/Bit_Math.h"
#include "DIO.h"

EN_dioReturn_t DIO_setPin(EN_PINx_t pinNum, EN_GPIOx_t portNum, EN_pinMode_t pinMode)
{
    switch(portNum)
  7c:	61 30       	cpi	r22, 0x01	; 1
  7e:	41 f1       	breq	.+80     	; 0xd0 <DIO_setPin+0x54>
  80:	38 f0       	brcs	.+14     	; 0x90 <DIO_setPin+0x14>
  82:	62 30       	cpi	r22, 0x02	; 2
  84:	09 f4       	brne	.+2      	; 0x88 <DIO_setPin+0xc>
  86:	44 c0       	rjmp	.+136    	; 0x110 <DIO_setPin+0x94>
  88:	63 30       	cpi	r22, 0x03	; 3
  8a:	09 f4       	brne	.+2      	; 0x8e <DIO_setPin+0x12>
  8c:	60 c0       	rjmp	.+192    	; 0x14e <DIO_setPin+0xd2>
  8e:	7e c0       	rjmp	.+252    	; 0x18c <DIO_setPin+0x110>
    {
        case GPIOA:
            if(pinMode == INPUT)
  90:	41 11       	cpse	r20, r1
  92:	0e c0       	rjmp	.+28     	; 0xb0 <DIO_setPin+0x34>
            {
                CLR_BIT(DDRA, pinNum);
  94:	4a b3       	in	r20, 0x1a	; 26
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	b9 01       	movw	r22, r18
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_setPin+0x26>
  9e:	66 0f       	add	r22, r22
  a0:	77 1f       	adc	r23, r23
  a2:	8a 95       	dec	r24
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_setPin+0x22>
  a6:	cb 01       	movw	r24, r22
  a8:	80 95       	com	r24
  aa:	84 23       	and	r24, r20
  ac:	8a bb       	out	0x1a, r24	; 26
  ae:	6d c0       	rjmp	.+218    	; 0x18a <DIO_setPin+0x10e>
            }
            else if(pinMode == OUTPUT)
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	09 f0       	breq	.+2      	; 0xb6 <DIO_setPin+0x3a>
  b4:	6d c0       	rjmp	.+218    	; 0x190 <DIO_setPin+0x114>
            {
                SET_BIT(DDRA, pinNum);
  b6:	4a b3       	in	r20, 0x1a	; 26
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	b9 01       	movw	r22, r18
  be:	02 c0       	rjmp	.+4      	; 0xc4 <DIO_setPin+0x48>
  c0:	66 0f       	add	r22, r22
  c2:	77 1f       	adc	r23, r23
  c4:	8a 95       	dec	r24
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <DIO_setPin+0x44>
  c8:	cb 01       	movw	r24, r22
  ca:	84 2b       	or	r24, r20
  cc:	8a bb       	out	0x1a, r24	; 26
  ce:	5d c0       	rjmp	.+186    	; 0x18a <DIO_setPin+0x10e>
                return PIN_MODE_ERROR;
            }
        break;

        case GPIOB:
            if(pinMode == INPUT)
  d0:	41 11       	cpse	r20, r1
  d2:	0e c0       	rjmp	.+28     	; 0xf0 <DIO_setPin+0x74>
            {
                CLR_BIT(DDRB, pinNum);
  d4:	47 b3       	in	r20, 0x17	; 23
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	b9 01       	movw	r22, r18
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_setPin+0x66>
  de:	66 0f       	add	r22, r22
  e0:	77 1f       	adc	r23, r23
  e2:	8a 95       	dec	r24
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_setPin+0x62>
  e6:	cb 01       	movw	r24, r22
  e8:	80 95       	com	r24
  ea:	84 23       	and	r24, r20
  ec:	87 bb       	out	0x17, r24	; 23
  ee:	4d c0       	rjmp	.+154    	; 0x18a <DIO_setPin+0x10e>
            }
            else if(pinMode == OUTPUT)
  f0:	41 30       	cpi	r20, 0x01	; 1
  f2:	09 f0       	breq	.+2      	; 0xf6 <DIO_setPin+0x7a>
  f4:	4f c0       	rjmp	.+158    	; 0x194 <DIO_setPin+0x118>
            {
                SET_BIT(DDRB, pinNum);
  f6:	47 b3       	in	r20, 0x17	; 23
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	b9 01       	movw	r22, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_setPin+0x88>
 100:	66 0f       	add	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	8a 95       	dec	r24
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_setPin+0x84>
 108:	cb 01       	movw	r24, r22
 10a:	84 2b       	or	r24, r20
 10c:	87 bb       	out	0x17, r24	; 23
 10e:	3d c0       	rjmp	.+122    	; 0x18a <DIO_setPin+0x10e>
                return PIN_MODE_ERROR;
            }
        break;

        case GPIOC:
            if(pinMode == INPUT)
 110:	41 11       	cpse	r20, r1
 112:	0e c0       	rjmp	.+28     	; 0x130 <DIO_setPin+0xb4>
            {
                CLR_BIT(DDRC, pinNum);
 114:	44 b3       	in	r20, 0x14	; 20
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	b9 01       	movw	r22, r18
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_setPin+0xa6>
 11e:	66 0f       	add	r22, r22
 120:	77 1f       	adc	r23, r23
 122:	8a 95       	dec	r24
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_setPin+0xa2>
 126:	cb 01       	movw	r24, r22
 128:	80 95       	com	r24
 12a:	84 23       	and	r24, r20
 12c:	84 bb       	out	0x14, r24	; 20
 12e:	2d c0       	rjmp	.+90     	; 0x18a <DIO_setPin+0x10e>
            }
            else if(pinMode == OUTPUT)
 130:	41 30       	cpi	r20, 0x01	; 1
 132:	91 f5       	brne	.+100    	; 0x198 <DIO_setPin+0x11c>
            {
                SET_BIT(DDRC, pinNum);
 134:	44 b3       	in	r20, 0x14	; 20
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	b9 01       	movw	r22, r18
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_setPin+0xc6>
 13e:	66 0f       	add	r22, r22
 140:	77 1f       	adc	r23, r23
 142:	8a 95       	dec	r24
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_setPin+0xc2>
 146:	cb 01       	movw	r24, r22
 148:	84 2b       	or	r24, r20
 14a:	84 bb       	out	0x14, r24	; 20
 14c:	1e c0       	rjmp	.+60     	; 0x18a <DIO_setPin+0x10e>
                return PIN_MODE_ERROR;
            }
        break;

        case GPIOD:
            if(pinMode == INPUT)
 14e:	41 11       	cpse	r20, r1
 150:	0e c0       	rjmp	.+28     	; 0x16e <DIO_setPin+0xf2>
            {
                CLR_BIT(DDRD, pinNum);
 152:	41 b3       	in	r20, 0x11	; 17
 154:	21 e0       	ldi	r18, 0x01	; 1
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	b9 01       	movw	r22, r18
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_setPin+0xe4>
 15c:	66 0f       	add	r22, r22
 15e:	77 1f       	adc	r23, r23
 160:	8a 95       	dec	r24
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_setPin+0xe0>
 164:	cb 01       	movw	r24, r22
 166:	80 95       	com	r24
 168:	84 23       	and	r24, r20
 16a:	81 bb       	out	0x11, r24	; 17
 16c:	0e c0       	rjmp	.+28     	; 0x18a <DIO_setPin+0x10e>
            }
            else if(pinMode == OUTPUT)
 16e:	41 30       	cpi	r20, 0x01	; 1
 170:	a9 f4       	brne	.+42     	; 0x19c <DIO_setPin+0x120>
            {
                SET_BIT(DDRD, pinNum);
 172:	41 b3       	in	r20, 0x11	; 17
 174:	21 e0       	ldi	r18, 0x01	; 1
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	b9 01       	movw	r22, r18
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_setPin+0x104>
 17c:	66 0f       	add	r22, r22
 17e:	77 1f       	adc	r23, r23
 180:	8a 95       	dec	r24
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_setPin+0x100>
 184:	cb 01       	movw	r24, r22
 186:	84 2b       	or	r24, r20
 188:	81 bb       	out	0x11, r24	; 17

        default:
            return PORT_NOT_FOUND;
        break;
    }
}
 18a:	08 95       	ret
                return PIN_MODE_ERROR;
            }
        break;

        default:
            return PORT_NOT_FOUND;
 18c:	8c ef       	ldi	r24, 0xFC	; 252
 18e:	08 95       	ret
            {
                SET_BIT(DDRA, pinNum);
            }
            else
            {
                return PIN_MODE_ERROR;
 190:	8e ef       	ldi	r24, 0xFE	; 254
 192:	08 95       	ret
            {
                SET_BIT(DDRB, pinNum);
            }
            else
            {
                return PIN_MODE_ERROR;
 194:	8e ef       	ldi	r24, 0xFE	; 254
 196:	08 95       	ret
            {
                SET_BIT(DDRC, pinNum);
            }
            else
            {
                return PIN_MODE_ERROR;
 198:	8e ef       	ldi	r24, 0xFE	; 254
 19a:	08 95       	ret
            {
                SET_BIT(DDRD, pinNum);
            }
            else
            {
                return PIN_MODE_ERROR;
 19c:	8e ef       	ldi	r24, 0xFE	; 254

        default:
            return PORT_NOT_FOUND;
        break;
    }
}
 19e:	08 95       	ret

000001a0 <DIO_writePin>:

EN_dioReturn_t DIO_writePin(EN_PINx_t pinNum, EN_GPIOx_t portNum, EN_pinState_t pinState)
{
    switch(portNum)
 1a0:	61 30       	cpi	r22, 0x01	; 1
 1a2:	41 f1       	breq	.+80     	; 0x1f4 <DIO_writePin+0x54>
 1a4:	38 f0       	brcs	.+14     	; 0x1b4 <DIO_writePin+0x14>
 1a6:	62 30       	cpi	r22, 0x02	; 2
 1a8:	09 f4       	brne	.+2      	; 0x1ac <DIO_writePin+0xc>
 1aa:	44 c0       	rjmp	.+136    	; 0x234 <DIO_writePin+0x94>
 1ac:	63 30       	cpi	r22, 0x03	; 3
 1ae:	09 f4       	brne	.+2      	; 0x1b2 <DIO_writePin+0x12>
 1b0:	60 c0       	rjmp	.+192    	; 0x272 <DIO_writePin+0xd2>
 1b2:	7e c0       	rjmp	.+252    	; 0x2b0 <DIO_writePin+0x110>
    {
        case GPIOA:
        if(pinState == LOW)
 1b4:	41 11       	cpse	r20, r1
 1b6:	0e c0       	rjmp	.+28     	; 0x1d4 <DIO_writePin+0x34>
        {
            CLR_BIT(PORTA, pinNum);
 1b8:	4b b3       	in	r20, 0x1b	; 27
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	b9 01       	movw	r22, r18
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_writePin+0x26>
 1c2:	66 0f       	add	r22, r22
 1c4:	77 1f       	adc	r23, r23
 1c6:	8a 95       	dec	r24
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_writePin+0x22>
 1ca:	cb 01       	movw	r24, r22
 1cc:	80 95       	com	r24
 1ce:	84 23       	and	r24, r20
 1d0:	8b bb       	out	0x1b, r24	; 27
 1d2:	6d c0       	rjmp	.+218    	; 0x2ae <DIO_writePin+0x10e>
        }
        else if(pinState == HIGH)
 1d4:	41 30       	cpi	r20, 0x01	; 1
 1d6:	09 f0       	breq	.+2      	; 0x1da <DIO_writePin+0x3a>
 1d8:	6d c0       	rjmp	.+218    	; 0x2b4 <DIO_writePin+0x114>
        {
            SET_BIT(PORTA, pinNum);
 1da:	4b b3       	in	r20, 0x1b	; 27
 1dc:	21 e0       	ldi	r18, 0x01	; 1
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	b9 01       	movw	r22, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_writePin+0x48>
 1e4:	66 0f       	add	r22, r22
 1e6:	77 1f       	adc	r23, r23
 1e8:	8a 95       	dec	r24
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_writePin+0x44>
 1ec:	cb 01       	movw	r24, r22
 1ee:	84 2b       	or	r24, r20
 1f0:	8b bb       	out	0x1b, r24	; 27
 1f2:	5d c0       	rjmp	.+186    	; 0x2ae <DIO_writePin+0x10e>
            return STATE_ERROR;
        }
        break;

        case GPIOB:
        if(pinState == LOW)
 1f4:	41 11       	cpse	r20, r1
 1f6:	0e c0       	rjmp	.+28     	; 0x214 <DIO_writePin+0x74>
        {
            CLR_BIT(PORTB, pinNum);
 1f8:	48 b3       	in	r20, 0x18	; 24
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	b9 01       	movw	r22, r18
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_writePin+0x66>
 202:	66 0f       	add	r22, r22
 204:	77 1f       	adc	r23, r23
 206:	8a 95       	dec	r24
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_writePin+0x62>
 20a:	cb 01       	movw	r24, r22
 20c:	80 95       	com	r24
 20e:	84 23       	and	r24, r20
 210:	88 bb       	out	0x18, r24	; 24
 212:	4d c0       	rjmp	.+154    	; 0x2ae <DIO_writePin+0x10e>
        }
        else if(pinState == HIGH)
 214:	41 30       	cpi	r20, 0x01	; 1
 216:	09 f0       	breq	.+2      	; 0x21a <DIO_writePin+0x7a>
 218:	4f c0       	rjmp	.+158    	; 0x2b8 <DIO_writePin+0x118>
        {
            SET_BIT(PORTB, pinNum);
 21a:	48 b3       	in	r20, 0x18	; 24
 21c:	21 e0       	ldi	r18, 0x01	; 1
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	b9 01       	movw	r22, r18
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_writePin+0x88>
 224:	66 0f       	add	r22, r22
 226:	77 1f       	adc	r23, r23
 228:	8a 95       	dec	r24
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_writePin+0x84>
 22c:	cb 01       	movw	r24, r22
 22e:	84 2b       	or	r24, r20
 230:	88 bb       	out	0x18, r24	; 24
 232:	3d c0       	rjmp	.+122    	; 0x2ae <DIO_writePin+0x10e>
            return STATE_ERROR;
        }
        break;

        case GPIOC:
        if(pinState == LOW)
 234:	41 11       	cpse	r20, r1
 236:	0e c0       	rjmp	.+28     	; 0x254 <DIO_writePin+0xb4>
        {
            CLR_BIT(PORTC, pinNum);
 238:	45 b3       	in	r20, 0x15	; 21
 23a:	21 e0       	ldi	r18, 0x01	; 1
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	b9 01       	movw	r22, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_writePin+0xa6>
 242:	66 0f       	add	r22, r22
 244:	77 1f       	adc	r23, r23
 246:	8a 95       	dec	r24
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_writePin+0xa2>
 24a:	cb 01       	movw	r24, r22
 24c:	80 95       	com	r24
 24e:	84 23       	and	r24, r20
 250:	85 bb       	out	0x15, r24	; 21
 252:	2d c0       	rjmp	.+90     	; 0x2ae <DIO_writePin+0x10e>
        }
        else if(pinState == HIGH)
 254:	41 30       	cpi	r20, 0x01	; 1
 256:	91 f5       	brne	.+100    	; 0x2bc <DIO_writePin+0x11c>
        {
            SET_BIT(PORTC, pinNum);
 258:	45 b3       	in	r20, 0x15	; 21
 25a:	21 e0       	ldi	r18, 0x01	; 1
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	b9 01       	movw	r22, r18
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_writePin+0xc6>
 262:	66 0f       	add	r22, r22
 264:	77 1f       	adc	r23, r23
 266:	8a 95       	dec	r24
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_writePin+0xc2>
 26a:	cb 01       	movw	r24, r22
 26c:	84 2b       	or	r24, r20
 26e:	85 bb       	out	0x15, r24	; 21
 270:	1e c0       	rjmp	.+60     	; 0x2ae <DIO_writePin+0x10e>
            return STATE_ERROR;
        }
        break;

        case GPIOD:
        if(pinState == LOW)
 272:	41 11       	cpse	r20, r1
 274:	0e c0       	rjmp	.+28     	; 0x292 <DIO_writePin+0xf2>
        {
            CLR_BIT(PORTD, pinNum);
 276:	42 b3       	in	r20, 0x12	; 18
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	b9 01       	movw	r22, r18
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_writePin+0xe4>
 280:	66 0f       	add	r22, r22
 282:	77 1f       	adc	r23, r23
 284:	8a 95       	dec	r24
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_writePin+0xe0>
 288:	cb 01       	movw	r24, r22
 28a:	80 95       	com	r24
 28c:	84 23       	and	r24, r20
 28e:	82 bb       	out	0x12, r24	; 18
 290:	0e c0       	rjmp	.+28     	; 0x2ae <DIO_writePin+0x10e>
        }
        else if(pinState == HIGH)
 292:	41 30       	cpi	r20, 0x01	; 1
 294:	a9 f4       	brne	.+42     	; 0x2c0 <DIO_writePin+0x120>
        {
            SET_BIT(PORTD, pinNum);
 296:	42 b3       	in	r20, 0x12	; 18
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	b9 01       	movw	r22, r18
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_writePin+0x104>
 2a0:	66 0f       	add	r22, r22
 2a2:	77 1f       	adc	r23, r23
 2a4:	8a 95       	dec	r24
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_writePin+0x100>
 2a8:	cb 01       	movw	r24, r22
 2aa:	84 2b       	or	r24, r20
 2ac:	82 bb       	out	0x12, r24	; 18

        default:
            return PORT_NOT_FOUND;
        break;
    }
}
 2ae:	08 95       	ret
            return STATE_ERROR;
        }
        break;

        default:
            return PORT_NOT_FOUND;
 2b0:	8c ef       	ldi	r24, 0xFC	; 252
 2b2:	08 95       	ret
        {
            SET_BIT(PORTA, pinNum);
        }
        else
        {
            return STATE_ERROR;
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	08 95       	ret
        {
            SET_BIT(PORTB, pinNum);
        }
        else
        {
            return STATE_ERROR;
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	08 95       	ret
        {
            SET_BIT(PORTC, pinNum);
        }
        else
        {
            return STATE_ERROR;
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	08 95       	ret
        {
            SET_BIT(PORTD, pinNum);
        }
        else
        {
            return STATE_ERROR;
 2c0:	8f ef       	ldi	r24, 0xFF	; 255

        default:
            return PORT_NOT_FOUND;
        break;
    }
}
 2c2:	08 95       	ret

000002c4 <DIO_Toggle>:

EN_dioReturn_t DIO_Toggle(EN_PINx_t pinNum, EN_GPIOx_t portNum)
{
    switch(portNum)
 2c4:	61 30       	cpi	r22, 0x01	; 1
 2c6:	99 f0       	breq	.+38     	; 0x2ee <DIO_Toggle+0x2a>
 2c8:	28 f0       	brcs	.+10     	; 0x2d4 <DIO_Toggle+0x10>
 2ca:	62 30       	cpi	r22, 0x02	; 2
 2cc:	e9 f0       	breq	.+58     	; 0x308 <DIO_Toggle+0x44>
 2ce:	63 30       	cpi	r22, 0x03	; 3
 2d0:	41 f1       	breq	.+80     	; 0x322 <DIO_Toggle+0x5e>
 2d2:	34 c0       	rjmp	.+104    	; 0x33c <DIO_Toggle+0x78>
    {
        case GPIOA:
            TOG_BIT(PORTA, pinNum);
 2d4:	4b b3       	in	r20, 0x1b	; 27
 2d6:	21 e0       	ldi	r18, 0x01	; 1
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	b9 01       	movw	r22, r18
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_Toggle+0x1e>
 2de:	66 0f       	add	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	8a 95       	dec	r24
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_Toggle+0x1a>
 2e6:	cb 01       	movw	r24, r22
 2e8:	84 27       	eor	r24, r20
 2ea:	8b bb       	out	0x1b, r24	; 27
        break;
 2ec:	29 c0       	rjmp	.+82     	; 0x340 <DIO_Toggle+0x7c>

        case GPIOB:
            TOG_BIT(PORTB, pinNum);
 2ee:	48 b3       	in	r20, 0x18	; 24
 2f0:	21 e0       	ldi	r18, 0x01	; 1
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	b9 01       	movw	r22, r18
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_Toggle+0x38>
 2f8:	66 0f       	add	r22, r22
 2fa:	77 1f       	adc	r23, r23
 2fc:	8a 95       	dec	r24
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_Toggle+0x34>
 300:	cb 01       	movw	r24, r22
 302:	84 27       	eor	r24, r20
 304:	88 bb       	out	0x18, r24	; 24
        break;
 306:	1c c0       	rjmp	.+56     	; 0x340 <DIO_Toggle+0x7c>

        case GPIOC:
            TOG_BIT(PORTC, pinNum);
 308:	45 b3       	in	r20, 0x15	; 21
 30a:	21 e0       	ldi	r18, 0x01	; 1
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	b9 01       	movw	r22, r18
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_Toggle+0x52>
 312:	66 0f       	add	r22, r22
 314:	77 1f       	adc	r23, r23
 316:	8a 95       	dec	r24
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_Toggle+0x4e>
 31a:	cb 01       	movw	r24, r22
 31c:	84 27       	eor	r24, r20
 31e:	85 bb       	out	0x15, r24	; 21
        break;
 320:	0f c0       	rjmp	.+30     	; 0x340 <DIO_Toggle+0x7c>

        case GPIOD:
            TOG_BIT(PORTD, pinNum);
 322:	42 b3       	in	r20, 0x12	; 18
 324:	21 e0       	ldi	r18, 0x01	; 1
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	b9 01       	movw	r22, r18
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_Toggle+0x6c>
 32c:	66 0f       	add	r22, r22
 32e:	77 1f       	adc	r23, r23
 330:	8a 95       	dec	r24
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_Toggle+0x68>
 334:	cb 01       	movw	r24, r22
 336:	84 27       	eor	r24, r20
 338:	82 bb       	out	0x12, r24	; 18
        break;
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_Toggle+0x7c>

        default:
            return PORT_NOT_FOUND;
 33c:	8c ef       	ldi	r24, 0xFC	; 252
 33e:	08 95       	ret
        break;
    }
}
 340:	08 95       	ret

00000342 <DIO_readpin>:

EN_pinState_t DIO_readpin(EN_PINx_t pinNum, EN_GPIOx_t portNum)
{
	EN_pinState_t pinState;
    switch(portNum)
 342:	61 30       	cpi	r22, 0x01	; 1
 344:	e9 f0       	breq	.+58     	; 0x380 <DIO_readpin+0x3e>
 346:	30 f0       	brcs	.+12     	; 0x354 <DIO_readpin+0x12>
 348:	62 30       	cpi	r22, 0x02	; 2
 34a:	81 f1       	breq	.+96     	; 0x3ac <DIO_readpin+0x6a>
 34c:	63 30       	cpi	r22, 0x03	; 3
 34e:	09 f4       	brne	.+2      	; 0x352 <DIO_readpin+0x10>
 350:	43 c0       	rjmp	.+134    	; 0x3d8 <DIO_readpin+0x96>
 352:	58 c0       	rjmp	.+176    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
    {
        case GPIOA:
            pinState = GET_BIT(PINA, pinNum);
 354:	99 b3       	in	r25, 0x19	; 25
 356:	21 e0       	ldi	r18, 0x01	; 1
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	a9 01       	movw	r20, r18
 35c:	08 2e       	mov	r0, r24
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_readpin+0x22>
 360:	44 0f       	add	r20, r20
 362:	55 1f       	adc	r21, r21
 364:	0a 94       	dec	r0
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_readpin+0x1e>
 368:	29 2f       	mov	r18, r25
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	24 23       	and	r18, r20
 36e:	35 23       	and	r19, r21
 370:	a9 01       	movw	r20, r18
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_readpin+0x36>
 374:	56 95       	lsr	r21
 376:	47 95       	ror	r20
 378:	8a 95       	dec	r24
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_readpin+0x32>
 37c:	ca 01       	movw	r24, r20
        break;
 37e:	08 95       	ret

        case GPIOB:
            pinState = GET_BIT(PINB, pinNum);
 380:	96 b3       	in	r25, 0x16	; 22
 382:	21 e0       	ldi	r18, 0x01	; 1
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	a9 01       	movw	r20, r18
 388:	08 2e       	mov	r0, r24
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_readpin+0x4e>
 38c:	44 0f       	add	r20, r20
 38e:	55 1f       	adc	r21, r21
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_readpin+0x4a>
 394:	29 2f       	mov	r18, r25
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	24 23       	and	r18, r20
 39a:	35 23       	and	r19, r21
 39c:	a9 01       	movw	r20, r18
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_readpin+0x62>
 3a0:	56 95       	lsr	r21
 3a2:	47 95       	ror	r20
 3a4:	8a 95       	dec	r24
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_readpin+0x5e>
 3a8:	ca 01       	movw	r24, r20
        break;
 3aa:	08 95       	ret

        case GPIOC:
            pinState = GET_BIT(PINC, pinNum);
 3ac:	93 b3       	in	r25, 0x13	; 19
 3ae:	21 e0       	ldi	r18, 0x01	; 1
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	a9 01       	movw	r20, r18
 3b4:	08 2e       	mov	r0, r24
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_readpin+0x7a>
 3b8:	44 0f       	add	r20, r20
 3ba:	55 1f       	adc	r21, r21
 3bc:	0a 94       	dec	r0
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_readpin+0x76>
 3c0:	29 2f       	mov	r18, r25
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	24 23       	and	r18, r20
 3c6:	35 23       	and	r19, r21
 3c8:	a9 01       	movw	r20, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_readpin+0x8e>
 3cc:	56 95       	lsr	r21
 3ce:	47 95       	ror	r20
 3d0:	8a 95       	dec	r24
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_readpin+0x8a>
 3d4:	ca 01       	movw	r24, r20
        break;
 3d6:	08 95       	ret

        case GPIOD:
            pinState = GET_BIT(PIND, pinNum);
 3d8:	90 b3       	in	r25, 0x10	; 16
 3da:	21 e0       	ldi	r18, 0x01	; 1
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	a9 01       	movw	r20, r18
 3e0:	08 2e       	mov	r0, r24
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_readpin+0xa6>
 3e4:	44 0f       	add	r20, r20
 3e6:	55 1f       	adc	r21, r21
 3e8:	0a 94       	dec	r0
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_readpin+0xa2>
 3ec:	29 2f       	mov	r18, r25
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	24 23       	and	r18, r20
 3f2:	35 23       	and	r19, r21
 3f4:	a9 01       	movw	r20, r18
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_readpin+0xba>
 3f8:	56 95       	lsr	r21
 3fa:	47 95       	ror	r20
 3fc:	8a 95       	dec	r24
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_readpin+0xb6>
 400:	ca 01       	movw	r24, r20
        break;
 402:	08 95       	ret

        default:
            return PORT_NOT_FOUND;
 404:	8c ef       	ldi	r24, 0xFC	; 252
        break;
    }

    return pinState;
 406:	08 95       	ret

00000408 <EXTI_init>:
#include "EXTI.h"

EN_dioReturn_t EXTI_init(EN_interrupt_t interruptPin, EN_senseControl_t senseControl)
{
    //1-Enable Global Interrupt bit in SREG
    SET_BIT(SREG, I);
 408:	9f b7       	in	r25, 0x3f	; 63
 40a:	90 68       	ori	r25, 0x80	; 128
 40c:	9f bf       	out	0x3f, r25	; 63

    //2- Choose Interrupt Sense Control
    switch(interruptPin)
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	61 f1       	breq	.+88     	; 0x46a <EXTI_init+0x62>
 412:	20 f0       	brcs	.+8      	; 0x41c <EXTI_init+0x14>
 414:	82 30       	cpi	r24, 0x02	; 2
 416:	09 f4       	brne	.+2      	; 0x41a <EXTI_init+0x12>
 418:	4f c0       	rjmp	.+158    	; 0x4b8 <EXTI_init+0xb0>
 41a:	5c c0       	rjmp	.+184    	; 0x4d4 <EXTI_init+0xcc>
    {
        case PIN_INT0:
            SET_BIT(GICR, INT0);
 41c:	8b b7       	in	r24, 0x3b	; 59
 41e:	80 64       	ori	r24, 0x40	; 64
 420:	8b bf       	out	0x3b, r24	; 59
            if(senseControl == FALLING_EDGE)
 422:	61 11       	cpse	r22, r1
 424:	07 c0       	rjmp	.+14     	; 0x434 <EXTI_init+0x2c>
            {
                SET_BIT(MCUCR, ISC01);
 426:	85 b7       	in	r24, 0x35	; 53
 428:	82 60       	ori	r24, 0x02	; 2
 42a:	85 bf       	out	0x35, r24	; 53
                CLR_BIT(MCUCR, ISC00);
 42c:	85 b7       	in	r24, 0x35	; 53
 42e:	8e 7f       	andi	r24, 0xFE	; 254
 430:	85 bf       	out	0x35, r24	; 53
 432:	50 c0       	rjmp	.+160    	; 0x4d4 <EXTI_init+0xcc>
				//DIO_writePin(PIN2, GPIOD, HIGH);
            }
            else if(senseControl == RISING_EDGE)
 434:	61 30       	cpi	r22, 0x01	; 1
 436:	39 f4       	brne	.+14     	; 0x446 <EXTI_init+0x3e>
            {
                SET_BIT(MCUCR, ISC01);
 438:	85 b7       	in	r24, 0x35	; 53
 43a:	82 60       	ori	r24, 0x02	; 2
 43c:	85 bf       	out	0x35, r24	; 53
                SET_BIT(MCUCR, ISC00);                
 43e:	85 b7       	in	r24, 0x35	; 53
 440:	81 60       	ori	r24, 0x01	; 1
 442:	85 bf       	out	0x35, r24	; 53
 444:	47 c0       	rjmp	.+142    	; 0x4d4 <EXTI_init+0xcc>
            }
            else if(senseControl == LOW_LEVEL)
 446:	62 30       	cpi	r22, 0x02	; 2
 448:	39 f4       	brne	.+14     	; 0x458 <EXTI_init+0x50>
            {
                CLR_BIT(MCUCR, ISC01);
 44a:	85 b7       	in	r24, 0x35	; 53
 44c:	8d 7f       	andi	r24, 0xFD	; 253
 44e:	85 bf       	out	0x35, r24	; 53
                CLR_BIT(MCUCR, ISC00);
 450:	85 b7       	in	r24, 0x35	; 53
 452:	8e 7f       	andi	r24, 0xFE	; 254
 454:	85 bf       	out	0x35, r24	; 53
 456:	3e c0       	rjmp	.+124    	; 0x4d4 <EXTI_init+0xcc>
            }
            else if(senseControl == ANY_LOGICAL_CHANGE)
 458:	63 30       	cpi	r22, 0x03	; 3
 45a:	e9 f5       	brne	.+122    	; 0x4d6 <EXTI_init+0xce>
            {
                SET_BIT(MCUCR, ISC00);
 45c:	85 b7       	in	r24, 0x35	; 53
 45e:	81 60       	ori	r24, 0x01	; 1
 460:	85 bf       	out	0x35, r24	; 53
                CLR_BIT(MCUCR, ISC01);               
 462:	85 b7       	in	r24, 0x35	; 53
 464:	8d 7f       	andi	r24, 0xFD	; 253
 466:	85 bf       	out	0x35, r24	; 53
 468:	35 c0       	rjmp	.+106    	; 0x4d4 <EXTI_init+0xcc>
                return ERROR_SENSE_CONTROL;
            }
        break;

        case PIN_INT1:
            SET_BIT(GICR, INT1);
 46a:	8b b7       	in	r24, 0x3b	; 59
 46c:	80 68       	ori	r24, 0x80	; 128
 46e:	8b bf       	out	0x3b, r24	; 59
            if(senseControl == FALLING_EDGE)
 470:	61 11       	cpse	r22, r1
 472:	07 c0       	rjmp	.+14     	; 0x482 <EXTI_init+0x7a>
            {
                SET_BIT(MCUCR, ISC11);
 474:	85 b7       	in	r24, 0x35	; 53
 476:	88 60       	ori	r24, 0x08	; 8
 478:	85 bf       	out	0x35, r24	; 53
                CLR_BIT(MCUCR, ISC10);
 47a:	85 b7       	in	r24, 0x35	; 53
 47c:	8b 7f       	andi	r24, 0xFB	; 251
 47e:	85 bf       	out	0x35, r24	; 53
 480:	29 c0       	rjmp	.+82     	; 0x4d4 <EXTI_init+0xcc>
            }
            else if(senseControl == RISING_EDGE)
 482:	61 30       	cpi	r22, 0x01	; 1
 484:	39 f4       	brne	.+14     	; 0x494 <EXTI_init+0x8c>
            {
                SET_BIT(MCUCR, ISC11);
 486:	85 b7       	in	r24, 0x35	; 53
 488:	88 60       	ori	r24, 0x08	; 8
 48a:	85 bf       	out	0x35, r24	; 53
                SET_BIT(MCUCR, ISC10);                
 48c:	85 b7       	in	r24, 0x35	; 53
 48e:	84 60       	ori	r24, 0x04	; 4
 490:	85 bf       	out	0x35, r24	; 53
 492:	20 c0       	rjmp	.+64     	; 0x4d4 <EXTI_init+0xcc>
            }
            else if(senseControl == LOW_LEVEL)
 494:	62 30       	cpi	r22, 0x02	; 2
 496:	39 f4       	brne	.+14     	; 0x4a6 <EXTI_init+0x9e>
            {
                CLR_BIT(MCUCR, ISC11);
 498:	85 b7       	in	r24, 0x35	; 53
 49a:	87 7f       	andi	r24, 0xF7	; 247
 49c:	85 bf       	out	0x35, r24	; 53
                CLR_BIT(MCUCR, ISC10);
 49e:	85 b7       	in	r24, 0x35	; 53
 4a0:	8b 7f       	andi	r24, 0xFB	; 251
 4a2:	85 bf       	out	0x35, r24	; 53
 4a4:	17 c0       	rjmp	.+46     	; 0x4d4 <EXTI_init+0xcc>
            }
            else if(senseControl == ANY_LOGICAL_CHANGE)
 4a6:	63 30       	cpi	r22, 0x03	; 3
 4a8:	b1 f4       	brne	.+44     	; 0x4d6 <EXTI_init+0xce>
            {
                SET_BIT(MCUCR, ISC10);
 4aa:	85 b7       	in	r24, 0x35	; 53
 4ac:	84 60       	ori	r24, 0x04	; 4
 4ae:	85 bf       	out	0x35, r24	; 53
                CLR_BIT(MCUCR, ISC11);               
 4b0:	85 b7       	in	r24, 0x35	; 53
 4b2:	87 7f       	andi	r24, 0xF7	; 247
 4b4:	85 bf       	out	0x35, r24	; 53
 4b6:	0e c0       	rjmp	.+28     	; 0x4d4 <EXTI_init+0xcc>
                return ERROR_SENSE_CONTROL;
            }
        break;

        case PIN_INT2:
            SET_BIT(GICR, INT2);
 4b8:	8b b7       	in	r24, 0x3b	; 59
 4ba:	80 62       	ori	r24, 0x20	; 32
 4bc:	8b bf       	out	0x3b, r24	; 59
            if(senseControl == FALLING_EDGE)
 4be:	61 11       	cpse	r22, r1
 4c0:	04 c0       	rjmp	.+8      	; 0x4ca <EXTI_init+0xc2>
            {
                CLR_BIT(MCUCSR, ISC2);
 4c2:	84 b7       	in	r24, 0x34	; 52
 4c4:	8f 7b       	andi	r24, 0xBF	; 191
 4c6:	84 bf       	out	0x34, r24	; 52
 4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <EXTI_init+0xcc>
            }
            else if(senseControl == RISING_EDGE)
 4ca:	61 30       	cpi	r22, 0x01	; 1
 4cc:	21 f4       	brne	.+8      	; 0x4d6 <EXTI_init+0xce>
            {
                SET_BIT(MCUCSR, ISC2);
 4ce:	84 b7       	in	r24, 0x34	; 52
 4d0:	80 64       	ori	r24, 0x40	; 64
 4d2:	84 bf       	out	0x34, r24	; 52
        break;

        default:
        break;
    }
 4d4:	08 95       	ret
 4d6:	84 e0       	ldi	r24, 0x04	; 4
 4d8:	08 95       	ret

000004da <TMR0_init>:
#define NUM_OF_OVERFLOWS_5SEC			  153
#define NUM_OF_BLINK_OVERFLOWS_200ms      16

EN_TMR0Mode_t TMR0_init(EN_TMR0Mode_t mode)
{
    switch(mode)
 4da:	81 30       	cpi	r24, 0x01	; 1
 4dc:	69 f0       	breq	.+26     	; 0x4f8 <TMR0_init+0x1e>
 4de:	28 f0       	brcs	.+10     	; 0x4ea <TMR0_init+0x10>
 4e0:	82 30       	cpi	r24, 0x02	; 2
 4e2:	89 f0       	breq	.+34     	; 0x506 <TMR0_init+0x2c>
 4e4:	83 30       	cpi	r24, 0x03	; 3
 4e6:	b1 f0       	breq	.+44     	; 0x514 <TMR0_init+0x3a>
 4e8:	1c c0       	rjmp	.+56     	; 0x522 <TMR0_init+0x48>
    {
        case NORMAL_MODE:
            CLR_BIT(TCCR0, WGM00);
 4ea:	83 b7       	in	r24, 0x33	; 51
 4ec:	8f 7b       	andi	r24, 0xBF	; 191
 4ee:	83 bf       	out	0x33, r24	; 51
            CLR_BIT(TCCR0, WGM01);
 4f0:	83 b7       	in	r24, 0x33	; 51
 4f2:	87 7f       	andi	r24, 0xF7	; 247
 4f4:	83 bf       	out	0x33, r24	; 51
        break;
 4f6:	17 c0       	rjmp	.+46     	; 0x526 <TMR0_init+0x4c>

        case CTC_MODE:
            CLR_BIT(TCCR0, WGM00);
 4f8:	83 b7       	in	r24, 0x33	; 51
 4fa:	8f 7b       	andi	r24, 0xBF	; 191
 4fc:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, WGM01);
 4fe:	83 b7       	in	r24, 0x33	; 51
 500:	88 60       	ori	r24, 0x08	; 8
 502:	83 bf       	out	0x33, r24	; 51
        break;
 504:	10 c0       	rjmp	.+32     	; 0x526 <TMR0_init+0x4c>

        case PWM_PHASE_CORRECT:
            SET_BIT(TCCR0, WGM00);
 506:	83 b7       	in	r24, 0x33	; 51
 508:	80 64       	ori	r24, 0x40	; 64
 50a:	83 bf       	out	0x33, r24	; 51
            CLR_BIT(TCCR0, WGM01);
 50c:	83 b7       	in	r24, 0x33	; 51
 50e:	87 7f       	andi	r24, 0xF7	; 247
 510:	83 bf       	out	0x33, r24	; 51
        break;
 512:	09 c0       	rjmp	.+18     	; 0x526 <TMR0_init+0x4c>

        case FAST_PWM:
            SET_BIT(TCCR0, WGM00);
 514:	83 b7       	in	r24, 0x33	; 51
 516:	80 64       	ori	r24, 0x40	; 64
 518:	83 bf       	out	0x33, r24	; 51
            SET_BIT(TCCR0, WGM01);
 51a:	83 b7       	in	r24, 0x33	; 51
 51c:	88 60       	ori	r24, 0x08	; 8
 51e:	83 bf       	out	0x33, r24	; 51
        break;
 520:	02 c0       	rjmp	.+4      	; 0x526 <TMR0_init+0x4c>

        default:
            return ERROR;
 522:	84 e0       	ldi	r24, 0x04	; 4
 524:	08 95       	ret
        break;
    }
}
 526:	08 95       	ret

00000528 <TMR0_delay>:

EN_TMR0Mode_t TMR0_delay(uint8_t preScaler)
{
	uint8_t overflowCount = 0;
	TCCR0 &= 0xF8;
 528:	93 b7       	in	r25, 0x33	; 51
 52a:	98 7f       	andi	r25, 0xF8	; 248
 52c:	93 bf       	out	0x33, r25	; 51
	TCCR0 |= preScaler;
 52e:	93 b7       	in	r25, 0x33	; 51
 530:	89 2b       	or	r24, r25
 532:	83 bf       	out	0x33, r24	; 51
    }
}

EN_TMR0Mode_t TMR0_delay(uint8_t preScaler)
{
	uint8_t overflowCount = 0;
 534:	90 e0       	ldi	r25, 0x00	; 0
	TCCR0 &= 0xF8;
	TCCR0 |= preScaler;
	
	while(overflowCount < NUM_OF_OVERFLOWS_5SEC)
 536:	07 c0       	rjmp	.+14     	; 0x546 <TMR0_delay+0x1e>
	{
		while(GET_BIT(TIFR, TOV0) == 0);
 538:	08 b6       	in	r0, 0x38	; 56
 53a:	00 fe       	sbrs	r0, 0
 53c:	fd cf       	rjmp	.-6      	; 0x538 <TMR0_delay+0x10>
		SET_BIT(TIFR, TOV0);
 53e:	88 b7       	in	r24, 0x38	; 56
 540:	81 60       	ori	r24, 0x01	; 1
 542:	88 bf       	out	0x38, r24	; 56
		overflowCount++;
 544:	9f 5f       	subi	r25, 0xFF	; 255
{
	uint8_t overflowCount = 0;
	TCCR0 &= 0xF8;
	TCCR0 |= preScaler;
	
	while(overflowCount < NUM_OF_OVERFLOWS_5SEC)
 546:	99 39       	cpi	r25, 0x99	; 153
 548:	b8 f3       	brcs	.-18     	; 0x538 <TMR0_delay+0x10>
	{
		while(GET_BIT(TIFR, TOV0) == 0);
		SET_BIT(TIFR, TOV0);
		overflowCount++;
	}
}
 54a:	08 95       	ret

0000054c <TMR0_start>:
// 	/*TMR0_start(preScaler);*/
// }

EN_TMR0Mode_t TMR0_start(uint8_t preScaler)
{
	TCCR0 &= 0xF8;
 54c:	93 b7       	in	r25, 0x33	; 51
 54e:	98 7f       	andi	r25, 0xF8	; 248
 550:	93 bf       	out	0x33, r25	; 51
	TCCR0 |= preScaler;
 552:	93 b7       	in	r25, 0x33	; 51
 554:	89 2b       	or	r24, r25
 556:	83 bf       	out	0x33, r24	; 51
}
 558:	08 95       	ret

0000055a <TMR0_blink>:

EN_TMR0Mode_t TMR0_blink(uint8_t preScaler)
{
	uint8_t overflowBlinkCount = 0;
	TCCR0 &= 0xF8;
 55a:	93 b7       	in	r25, 0x33	; 51
 55c:	98 7f       	andi	r25, 0xF8	; 248
 55e:	93 bf       	out	0x33, r25	; 51
	TCCR0 |= preScaler;
 560:	93 b7       	in	r25, 0x33	; 51
 562:	89 2b       	or	r24, r25
 564:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= preScaler;
}

EN_TMR0Mode_t TMR0_blink(uint8_t preScaler)
{
	uint8_t overflowBlinkCount = 0;
 566:	90 e0       	ldi	r25, 0x00	; 0
	TCCR0 &= 0xF8;
	TCCR0 |= preScaler;
	
	while(overflowBlinkCount < NUM_OF_BLINK_OVERFLOWS_200ms)
 568:	07 c0       	rjmp	.+14     	; 0x578 <TMR0_blink+0x1e>
	{
		while(GET_BIT(TIFR, TOV0) == 0);
 56a:	08 b6       	in	r0, 0x38	; 56
 56c:	00 fe       	sbrs	r0, 0
 56e:	fd cf       	rjmp	.-6      	; 0x56a <TMR0_blink+0x10>
		SET_BIT(TIFR, TOV0);
 570:	88 b7       	in	r24, 0x38	; 56
 572:	81 60       	ori	r24, 0x01	; 1
 574:	88 bf       	out	0x38, r24	; 56
		overflowBlinkCount++;
 576:	9f 5f       	subi	r25, 0xFF	; 255
{
	uint8_t overflowBlinkCount = 0;
	TCCR0 &= 0xF8;
	TCCR0 |= preScaler;
	
	while(overflowBlinkCount < NUM_OF_BLINK_OVERFLOWS_200ms)
 578:	90 31       	cpi	r25, 0x10	; 16
 57a:	b8 f3       	brcs	.-18     	; 0x56a <TMR0_blink+0x10>
	{
		while(GET_BIT(TIFR, TOV0) == 0);
		SET_BIT(TIFR, TOV0);
		overflowBlinkCount++;
	}
}
 57c:	08 95       	ret

0000057e <TMR0_loadTCNT0>:

void TMR0_loadTCNT0(uint8_t value)
{
    TCNT0 = value;
 57e:	82 bf       	out	0x32, r24	; 50
 580:	08 95       	ret

00000582 <BUTTON_init>:
#include "../../01- ECUAL/DIO/DIO.h"
#include "BUTTON.h"

void BUTTON_init(EN_PINx_t pinNum, EN_GPIOx_t portnum)
{
    DIO_setPin(pinNum, portnum, INPUT);
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_setPin>
 588:	08 95       	ret

0000058a <BUTTON_read>:
}

EN_pinState_t BUTTON_read(EN_PINx_t pinNum, EN_GPIOx_t portnum)
{
    return DIO_readpin(pinNum, portnum);
 58a:	0e 94 a1 01 	call	0x342	; 0x342 <DIO_readpin>
 58e:	08 95       	ret

00000590 <LED_Init>:
#include "../../00- Common/Bit_Math.h"
#include "../../01- ECUAL/DIO/DIO.h"

EN_dioReturn_t LED_Init(EN_PINx_t pinNum, EN_GPIOx_t portNum)
{
    DIO_setPin(pinNum, portNum, OUTPUT);
 590:	41 e0       	ldi	r20, 0x01	; 1
 592:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_setPin>
}
 596:	08 95       	ret

00000598 <LED_On>:

EN_dioReturn_t LED_On(EN_PINx_t pinNum, EN_GPIOx_t portNum)
{
    DIO_writePin(pinNum, portNum, HIGH);
 598:	41 e0       	ldi	r20, 0x01	; 1
 59a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_writePin>
}
 59e:	08 95       	ret

000005a0 <LED_Off>:

EN_dioReturn_t LED_Off(EN_PINx_t pinNum, EN_GPIOx_t portNum)
{
    DIO_writePin(pinNum, portNum, LOW);
 5a0:	40 e0       	ldi	r20, 0x00	; 0
 5a2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_writePin>
}
 5a6:	08 95       	ret

000005a8 <LED_Toggle>:

EN_dioReturn_t LED_Toggle(EN_PINx_t pinNum, EN_GPIOx_t portNum)
{
    DIO_Toggle(pinNum, portNum);
 5a8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <DIO_Toggle>
 5ac:	08 95       	ret

000005ae <APP_init>:


void APP_init(void)
{	
    //Traffic LEDs
    LED_Init(PIN0, GPIOA);
 5ae:	60 e0       	ldi	r22, 0x00	; 0
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	0e 94 c8 02 	call	0x590	; 0x590 <LED_Init>
	LED_Init(PIN1, GPIOA);
 5b6:	60 e0       	ldi	r22, 0x00	; 0
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	0e 94 c8 02 	call	0x590	; 0x590 <LED_Init>
	LED_Init(PIN2, GPIOA);
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	82 e0       	ldi	r24, 0x02	; 2
 5c2:	0e 94 c8 02 	call	0x590	; 0x590 <LED_Init>

   //Pedestrain LEDs
    LED_Init(PIN0, GPIOB);
 5c6:	61 e0       	ldi	r22, 0x01	; 1
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	0e 94 c8 02 	call	0x590	; 0x590 <LED_Init>
	LED_Init(PIN1, GPIOB);
 5ce:	61 e0       	ldi	r22, 0x01	; 1
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	0e 94 c8 02 	call	0x590	; 0x590 <LED_Init>
	LED_Init(PIN2, GPIOB);
 5d6:	61 e0       	ldi	r22, 0x01	; 1
 5d8:	82 e0       	ldi	r24, 0x02	; 2
 5da:	0e 94 c8 02 	call	0x590	; 0x590 <LED_Init>

	//Initialization Button
	BUTTON_init(PIN2, GPIOD);
 5de:	63 e0       	ldi	r22, 0x03	; 3
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	0e 94 c1 02 	call	0x582	; 0x582 <BUTTON_init>
	
	//Initialize INT0 Pin as an input
	DIO_setPin(PIN2, GPIOD, INPUT);
 5e6:	40 e0       	ldi	r20, 0x00	; 0
 5e8:	63 e0       	ldi	r22, 0x03	; 3
 5ea:	82 e0       	ldi	r24, 0x02	; 2
 5ec:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_setPin>
	DIO_writePin(PIN2, GPIOD, HIGH);
 5f0:	41 e0       	ldi	r20, 0x01	; 1
 5f2:	63 e0       	ldi	r22, 0x03	; 3
 5f4:	82 e0       	ldi	r24, 0x02	; 2
 5f6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DIO_writePin>
    //INitialization of Timer0
    TMR0_init(NORMAL_MODE);
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	0e 94 6d 02 	call	0x4da	; 0x4da <TMR0_init>

    //Load TCNT0 with initial value
    TMR0_loadTCNT0(0x00);
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	0e 94 bf 02 	call	0x57e	; 0x57e <TMR0_loadTCNT0>
	TMR0_start(TMR0_PRESCALER_1024);
 606:	85 e0       	ldi	r24, 0x05	; 5
 608:	0e 94 a6 02 	call	0x54c	; 0x54c <TMR0_start>
	
	//External Interrupt Initialization
	EXTI_init(PIN_INT0, FALLING_EDGE);
 60c:	60 e0       	ldi	r22, 0x00	; 0
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	0e 94 04 02 	call	0x408	; 0x408 <EXTI_init>
 614:	08 95       	ret

00000616 <blinkYellowLed>:
}

uint8_t blinkYellowLed(void)
{
	blink = 0;
 616:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <blink>
	TMR0_loadTCNT0(0x0C);
 61a:	8c e0       	ldi	r24, 0x0C	; 12
 61c:	0e 94 bf 02 	call	0x57e	; 0x57e <TMR0_loadTCNT0>
	while(blink != 10)
 620:	10 c0       	rjmp	.+32     	; 0x642 <blinkYellowLed+0x2c>
	{
		LED_Toggle(PIN1, GPIOA);
 622:	60 e0       	ldi	r22, 0x00	; 0
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <LED_Toggle>
		LED_Toggle(PIN1, GPIOB);
 62a:	61 e0       	ldi	r22, 0x01	; 1
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <LED_Toggle>
		TMR0_blink(TMR0_PRESCALER_1024);
 632:	85 e0       	ldi	r24, 0x05	; 5
 634:	0e 94 ad 02 	call	0x55a	; 0x55a <TMR0_blink>
		//LED_Toggle(PIN1, GPIOA);
		blink++;
 638:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <blink>
 63c:	8f 5f       	subi	r24, 0xFF	; 255
 63e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <blink>

uint8_t blinkYellowLed(void)
{
	blink = 0;
	TMR0_loadTCNT0(0x0C);
	while(blink != 10)
 642:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <blink>
 646:	8a 30       	cpi	r24, 0x0A	; 10
 648:	61 f7       	brne	.-40     	; 0x622 <blinkYellowLed+0xc>
		LED_Toggle(PIN1, GPIOB);
		TMR0_blink(TMR0_PRESCALER_1024);
		//LED_Toggle(PIN1, GPIOA);
		blink++;
	}
	LED_Off(PIN1, GPIOA);
 64a:	60 e0       	ldi	r22, 0x00	; 0
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LED_Off>
	LED_Off(PIN1, GPIOB);
 652:	61 e0       	ldi	r22, 0x01	; 1
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LED_Off>
	blink = 0;
 65a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <blink>
}
 65e:	08 95       	ret

00000660 <trafficLightMode>:

void trafficLightMode(void)
{
    LED_On(PIN2, GPIOA);	//Cars Green led
 660:	60 e0       	ldi	r22, 0x00	; 0
 662:	82 e0       	ldi	r24, 0x02	; 2
 664:	0e 94 cc 02 	call	0x598	; 0x598 <LED_On>
	LED_On(PIN0, GPIOB);	//pedstrain Red led
 668:	61 e0       	ldi	r22, 0x01	; 1
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	0e 94 cc 02 	call	0x598	; 0x598 <LED_On>
	
    TMR0_delay(TMR0_PRESCALER_1024);
 670:	85 e0       	ldi	r24, 0x05	; 5
 672:	0e 94 94 02 	call	0x528	; 0x528 <TMR0_delay>
	
	//Yellow Led is blinking for 5 seconds
	blinkYellowLed();
 676:	0e 94 0b 03 	call	0x616	; 0x616 <blinkYellowLed>
	LED_Off(PIN2, GPIOA);
 67a:	60 e0       	ldi	r22, 0x00	; 0
 67c:	82 e0       	ldi	r24, 0x02	; 2
 67e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LED_Off>
 	LED_Off(PIN0, GPIOB);
 682:	61 e0       	ldi	r22, 0x01	; 1
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LED_Off>

	
	LED_On(PIN0, GPIOA);	//Cars Red led
 68a:	60 e0       	ldi	r22, 0x00	; 0
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	0e 94 cc 02 	call	0x598	; 0x598 <LED_On>
	LED_On(PIN2, GPIOB);	//pedstrain green led
 692:	61 e0       	ldi	r22, 0x01	; 1
 694:	82 e0       	ldi	r24, 0x02	; 2
 696:	0e 94 cc 02 	call	0x598	; 0x598 <LED_On>
	TMR0_delay(TMR0_PRESCALER_1024);
 69a:	85 e0       	ldi	r24, 0x05	; 5
 69c:	0e 94 94 02 	call	0x528	; 0x528 <TMR0_delay>
	//Yellow Led is blinking for 5 seconds
	blinkYellowLed();
 6a0:	0e 94 0b 03 	call	0x616	; 0x616 <blinkYellowLed>
	LED_Off(PIN0, GPIOA);
 6a4:	60 e0       	ldi	r22, 0x00	; 0
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LED_Off>
	LED_Off(PIN2, GPIOB);
 6ac:	61 e0       	ldi	r22, 0x01	; 1
 6ae:	82 e0       	ldi	r24, 0x02	; 2
 6b0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LED_Off>
 6b4:	08 95       	ret

000006b6 <APP_start>:
}

void APP_start(void)
{
    trafficLightMode();
 6b6:	0e 94 30 03 	call	0x660	; 0x660 <trafficLightMode>
 6ba:	08 95       	ret

000006bc <__vector_1>:
}

ISR(EXTI_INT_0)
{
 6bc:	1f 92       	push	r1
 6be:	0f 92       	push	r0
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	0f 92       	push	r0
 6c4:	11 24       	eor	r1, r1
 6c6:	2f 93       	push	r18
 6c8:	3f 93       	push	r19
 6ca:	4f 93       	push	r20
 6cc:	5f 93       	push	r21
 6ce:	6f 93       	push	r22
 6d0:	7f 93       	push	r23
 6d2:	8f 93       	push	r24
 6d4:	9f 93       	push	r25
 6d6:	af 93       	push	r26
 6d8:	bf 93       	push	r27
 6da:	cf 93       	push	r28
 6dc:	ef 93       	push	r30
 6de:	ff 93       	push	r31
	getPressedButton++;
 6e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6e4:	8f 5f       	subi	r24, 0xFF	; 255
 6e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	uint8_t count = 0;
 6ea:	c0 e0       	ldi	r28, 0x00	; 0
	while(BUTTON_read(PIN2, GPIOD) == LOW && getPressedButton <= 2)
 6ec:	09 c0       	rjmp	.+18     	; 0x700 <__vector_1+0x44>
	{
		if(count < NUM_OF_OVERFLOWS_20ms)
 6ee:	ca 30       	cpi	r28, 0x0A	; 10
 6f0:	00 f5       	brcc	.+64     	; 0x732 <__vector_1+0x76>
		{
			while(GET_BIT(TIFR, TOV0) == 0);
 6f2:	08 b6       	in	r0, 0x38	; 56
 6f4:	00 fe       	sbrs	r0, 0
 6f6:	fd cf       	rjmp	.-6      	; 0x6f2 <__vector_1+0x36>
			SET_BIT(TIFR, TOV0);
 6f8:	88 b7       	in	r24, 0x38	; 56
 6fa:	81 60       	ori	r24, 0x01	; 1
 6fc:	88 bf       	out	0x38, r24	; 56
			count++;
 6fe:	cf 5f       	subi	r28, 0xFF	; 255
ISR(EXTI_INT_0)
{
	getPressedButton++;
	
	uint8_t count = 0;
	while(BUTTON_read(PIN2, GPIOD) == LOW && getPressedButton <= 2)
 700:	63 e0       	ldi	r22, 0x03	; 3
 702:	82 e0       	ldi	r24, 0x02	; 2
 704:	0e 94 c5 02 	call	0x58a	; 0x58a <BUTTON_read>
 708:	81 11       	cpse	r24, r1
 70a:	15 c0       	rjmp	.+42     	; 0x736 <__vector_1+0x7a>
 70c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 710:	83 30       	cpi	r24, 0x03	; 3
 712:	68 f3       	brcs	.-38     	; 0x6ee <__vector_1+0x32>
 714:	c0 e0       	ldi	r28, 0x00	; 0
 716:	10 c0       	rjmp	.+32     	; 0x738 <__vector_1+0x7c>
	}
	
	count = 0;
	while(BUTTON_read(PIN2, GPIOD) == HIGH && getPressedButton <= 2)
	{
		if(count < NUM_OF_OVERFLOWS_20ms)
 718:	ca 30       	cpi	r28, 0x0A	; 10
 71a:	40 f4       	brcc	.+16     	; 0x72c <__vector_1+0x70>
		{
			while(GET_BIT(TIFR, TOV0) == 0);
 71c:	08 b6       	in	r0, 0x38	; 56
 71e:	00 fe       	sbrs	r0, 0
 720:	fd cf       	rjmp	.-6      	; 0x71c <__vector_1+0x60>
			SET_BIT(TIFR, TOV0);
 722:	88 b7       	in	r24, 0x38	; 56
 724:	81 60       	ori	r24, 0x01	; 1
 726:	88 bf       	out	0x38, r24	; 56
			count++;
 728:	cf 5f       	subi	r28, 0xFF	; 255
 72a:	06 c0       	rjmp	.+12     	; 0x738 <__vector_1+0x7c>
			getPressedButton = 0;
			break;
		}
		else
		{
			getPressedButton = 0;
 72c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 730:	0d c0       	rjmp	.+26     	; 0x74c <__vector_1+0x90>
 732:	c0 e0       	ldi	r28, 0x00	; 0
 734:	01 c0       	rjmp	.+2      	; 0x738 <__vector_1+0x7c>
 736:	c0 e0       	ldi	r28, 0x00	; 0
			break;
		}
	}
	
	count = 0;
	while(BUTTON_read(PIN2, GPIOD) == HIGH && getPressedButton <= 2)
 738:	63 e0       	ldi	r22, 0x03	; 3
 73a:	82 e0       	ldi	r24, 0x02	; 2
 73c:	0e 94 c5 02 	call	0x58a	; 0x58a <BUTTON_read>
 740:	81 30       	cpi	r24, 0x01	; 1
 742:	21 f4       	brne	.+8      	; 0x74c <__vector_1+0x90>
 744:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 748:	83 30       	cpi	r24, 0x03	; 3
 74a:	30 f3       	brcs	.-52     	; 0x718 <__vector_1+0x5c>
			getPressedButton = 0;
			break;
		}
	}
	
	if(BUTTON_read(PIN2, GPIOD) == HIGH && getPressedButton < 2)
 74c:	63 e0       	ldi	r22, 0x03	; 3
 74e:	82 e0       	ldi	r24, 0x02	; 2
 750:	0e 94 c5 02 	call	0x58a	; 0x58a <BUTTON_read>
 754:	81 30       	cpi	r24, 0x01	; 1
 756:	69 f5       	brne	.+90     	; 0x7b2 <__vector_1+0xf6>
 758:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 75c:	82 30       	cpi	r24, 0x02	; 2
 75e:	48 f5       	brcc	.+82     	; 0x7b2 <__vector_1+0xf6>
	{
		if((GET_BIT(PINA, PIN2) == HIGH))
 760:	ca 9b       	sbis	0x19, 2	; 25
 762:	27 c0       	rjmp	.+78     	; 0x7b2 <__vector_1+0xf6>
		{
			//LED_On(PIN0, GPIOB);	//pedestrain red led on
			blinkYellowLed();		//blink and delay 5 sec
 764:	0e 94 0b 03 	call	0x616	; 0x616 <blinkYellowLed>
			LED_Off(PIN2, GPIOA);	//cars green led off
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	82 e0       	ldi	r24, 0x02	; 2
 76c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LED_Off>
			LED_On(PIN0, GPIOA);	//cars red led on
 770:	60 e0       	ldi	r22, 0x00	; 0
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	0e 94 cc 02 	call	0x598	; 0x598 <LED_On>
			
			LED_Off(PIN0, GPIOB);	//pedestrain red led off
 778:	61 e0       	ldi	r22, 0x01	; 1
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LED_Off>
			LED_On(PIN2, GPIOB);	//pedestrain green led on
 780:	61 e0       	ldi	r22, 0x01	; 1
 782:	82 e0       	ldi	r24, 0x02	; 2
 784:	0e 94 cc 02 	call	0x598	; 0x598 <LED_On>
			TMR0_delay(TMR0_PRESCALER_1024);
 788:	85 e0       	ldi	r24, 0x05	; 5
 78a:	0e 94 94 02 	call	0x528	; 0x528 <TMR0_delay>
			blinkYellowLed();
 78e:	0e 94 0b 03 	call	0x616	; 0x616 <blinkYellowLed>
			LED_Off(PIN0, GPIOA);
 792:	60 e0       	ldi	r22, 0x00	; 0
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LED_Off>
			LED_Off(PIN2, GPIOB);
 79a:	61 e0       	ldi	r22, 0x01	; 1
 79c:	82 e0       	ldi	r24, 0x02	; 2
 79e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LED_Off>
			// 		//returen to pervoius state before interrupt
			LED_On(PIN2, GPIOA);	//Cars Green led
 7a2:	60 e0       	ldi	r22, 0x00	; 0
 7a4:	82 e0       	ldi	r24, 0x02	; 2
 7a6:	0e 94 cc 02 	call	0x598	; 0x598 <LED_On>
			LED_On(PIN0, GPIOB);	//pedstrain Red led
 7aa:	61 e0       	ldi	r22, 0x01	; 1
 7ac:	80 e0       	ldi	r24, 0x00	; 0
 7ae:	0e 94 cc 02 	call	0x598	; 0x598 <LED_On>
		else
		{
			//Do_Nothing
		}
	}
 7b2:	ff 91       	pop	r31
 7b4:	ef 91       	pop	r30
 7b6:	cf 91       	pop	r28
 7b8:	bf 91       	pop	r27
 7ba:	af 91       	pop	r26
 7bc:	9f 91       	pop	r25
 7be:	8f 91       	pop	r24
 7c0:	7f 91       	pop	r23
 7c2:	6f 91       	pop	r22
 7c4:	5f 91       	pop	r21
 7c6:	4f 91       	pop	r20
 7c8:	3f 91       	pop	r19
 7ca:	2f 91       	pop	r18
 7cc:	0f 90       	pop	r0
 7ce:	0f be       	out	0x3f, r0	; 63
 7d0:	0f 90       	pop	r0
 7d2:	1f 90       	pop	r1
 7d4:	18 95       	reti

000007d6 <main>:



int main(void)
{	
	APP_init();
 7d6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <APP_init>

    while (1) 
    {
		APP_start();
 7da:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <APP_start>
 7de:	fd cf       	rjmp	.-6      	; 0x7da <main+0x4>

000007e0 <_exit>:
 7e0:	f8 94       	cli

000007e2 <__stop_program>:
 7e2:	ff cf       	rjmp	.-2      	; 0x7e2 <__stop_program>
